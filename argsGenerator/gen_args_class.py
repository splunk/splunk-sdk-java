#!/usr/bin/env python

import sys

input = sys.stdin
output = sys.stdout


def read_line():
    """
    Returns the next line from the input, including the EOL sequence.
    Throws StopIteration on EOF.
    
    Skips comment lines automatically.
    """
    while True:
        line = next(input)
        if line.startswith('#'):
            continue
        return line


def lowercase_first_letter(string):
    return string[0].lower() + string[1:]


output.write("""    /* BEGIN AUTOGENERATED CODE */
    
""")

ignore_duplicates = False
machine_names_already_seen = set()

try:
    while True:
        machine_name = read_line()[:-1]
        if machine_name.startswith('!'):
            # Actually this is a directive. Process it.
            directive = machine_name
            if directive == '!SET ignore_duplicates 1':
                ignore_duplicates = True
            else:
                sys.exit("Unknown directive: %s" % directive)
            continue
        java_name = read_line()[:-1]
        type = read_line()[:-1]
        
        description_lines = []
        reading_description = True
        code_lines = None
        while True:
            line = read_line()
            if line.startswith('!CODE'):
                code_lines = []
                reading_description = False
                continue
            if line.startswith('='):
                break
            
            if reading_description:
                description_lines.append(line)
            else:
                code_lines.append(line)
        
        if not java_name[0].isupper():
            sys.exit("Expected first letter to be uppercase: %s" % java_name)
        java_name_lower = lowercase_first_letter(java_name)
        
        # Generate the setter code
        if code_lines is not None:
            # Custom code for this setter
            code = ''.join(code_lines)[:-1];
        else:
            # Standard code for this setter, depending on its parameter type
            code = """        this.put("%s", %s);""" % (machine_name, java_name_lower)
            if '[]' in type or type == 'Date':
                if type == 'String[]-MULTIPLE':
                    type = 'String[]'
                    code = """        this.put("%s", %s);""" % (machine_name, java_name_lower)
                elif type == 'String[]-CSV':
                    type = 'String[]'
                    code = """        StringBuilder csv = new StringBuilder();
            for (int i = 0, n = %s.length; i < n; i++) {
                if (i != 0) {
                    csv.append(",");
                }
                csv.append(%s[i]);
            }
            
            this.put("%s", String.valueOf(csv));""" % (java_name_lower, java_name_lower, machine_name)
                else:
                    sys.exit("Don't know how to encode an array of type: %s" % type);
        
        description_formatted = ''
        for line in description_lines:
            description_formatted += '     *      %s' % line
        
        if machine_name in machine_names_already_seen:
            if ignore_duplicates:
                continue
            else:
                sys.exit("Multiple definitions for argument: %s" % machine_name);
        else:
            machine_names_already_seen.add(machine_name)
        
        # Output the current argument
        output.write("""    /**
     * @param %s
%s     */
    public void set%s(%s %s) {
%s
    }
    
""" % (java_name_lower, description_formatted, java_name, type, java_name_lower, code))
    
except StopIteration:
    # Done!
    pass

output.write("""    /* END AUTOGENERATED CODE */
""")