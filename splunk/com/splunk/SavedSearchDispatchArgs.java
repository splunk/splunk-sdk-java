/*
 * Copyright 2012 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.splunk;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Arguments for the {@link SavedSearch#dispatch} method.
 */
public class SavedSearchDispatchArgs extends Args {

    /**
     * Class constructor.
     */
    public SavedSearchDispatchArgs() { super(); }
    
    /* BEGIN AUTOGENERATED CODE */
    
    /**
     * @param dispatchNow
     *      Dispatch the search as if this was the current time.
     */
    public void setDispatchNow(String dispatchNow) {
        this.put("dispatch.now", dispatchNow);
    }
    
    /**
     * @param dispatchBuckets
     *      The maximum number of timeline buckets.
     */
    public void setDispatchBuckets(int dispatchBuckets) {
        this.put("dispatch.buckets", dispatchBuckets);
    }
    
    /**
     * @param dispatchEarliestTime
     *      A time string that specifies the earliest time for this search. Can be a relative or absolute time.
     *      
     *      If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    public void setDispatchEarliestTime(String dispatchEarliestTime) {
        this.put("dispatch.earliest_time", dispatchEarliestTime);
    }
    
    /**
     * @param dispatchEarliestTime
     *      A date that specifies the earliest time for this search.
     */
    public void setDispatchEarliestTime(Date dispatchEarliestTime) {
        // Documented format:        "%FT%T.%Q%:z"
        // strftime original format: "%FT%T.%Q%:z"
        // strftime expanded format: "%Y-%m-%dT%H:%M:%S.%Q%:z"
        String javaFormatString =    "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
        String timeString = new SimpleDateFormat(javaFormatString).format(dispatchEarliestTime);
        this.put("dispatch.earliest_time", timeString);
    }
    
    /**
     * @param dispatchLatestTime
     *      A time string that specifies the latest time for this saved search. Can be a relative or absolute time.
     *      
     *      If this value is an absolute time, use the dispatch.time_format to format the value.
     */
    public void setDispatchLatestTime(String dispatchLatestTime) {
        this.put("dispatch.latest_time", dispatchLatestTime);
    }
    
    /**
     * @param dispatchLatestTime
     *      A date that specifies the latest time for this saved search.
     */
    public void setDispatchLatestTime(Date dispatchLatestTime) {
        // Documented format:        "%FT%T.%Q%:z"
        // strftime original format: "%FT%T.%Q%:z"
        // strftime expanded format: "%Y-%m-%dT%H:%M:%S.%Q%:z"
        String javaFormatString =    "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
        String timeString = new SimpleDateFormat(javaFormatString).format(dispatchLatestTime);
        this.put("dispatch.latest_time", timeString);
    }
    
    /**
     * @param dispatchLookups
     *      Enables or disables the lookups for this search.
     */
    public void setDispatchLookups(boolean dispatchLookups) {
        this.put("dispatch.lookups", dispatchLookups);
    }
    
    /**
     * @param dispatchMaximumCount
     *      The maximum number of results before finalizing the search.
     */
    public void setDispatchMaximumCount(int dispatchMaximumCount) {
        this.put("dispatch.max_count", dispatchMaximumCount);
    }
    
    /**
     * @param dispatchMaximumTime
     *      Indicates the maximum amount of time (in seconds) before finalizing the search.
     */
    public void setDispatchMaximumTime(int dispatchMaximumTime) {
        this.put("dispatch.max_time", dispatchMaximumTime);
    }
    
    /**
     * @param dispatchReduceFrequency
     *      Specifies, in seconds, how frequently Splunk should run the MapReduce reduce phase on accumulated map values.
     */
    public void setDispatchReduceFrequency(int dispatchReduceFrequency) {
        this.put("dispatch.reduce_freq", dispatchReduceFrequency);
    }
    
    /**
     * @param dispatchRealTimeBackfill
     *      Whether to back fill the real time window for this search. Parameter valid only if this is a real time search
     */
    public void setDispatchRealTimeBackfill(boolean dispatchRealTimeBackfill) {
        this.put("dispatch.rt_backfill", dispatchRealTimeBackfill);
    }
    
    /**
     * @param dispatchSpawnProcess
     *      Specifies whether Splunk spawns a new search process when this saved search is executed.
     *      
     *      Searches against indexes must run in a separate process.
     */
    public void setDispatchSpawnProcess(boolean dispatchSpawnProcess) {
        this.put("dispatch.spawn_process", dispatchSpawnProcess);
    }
    
    /**
     * @param dispatchTimeFormat
     *      A time format string that defines the time format that Splunk uses to specify the earliest and latest time. 
     */
    public void setDispatchTimeFormat(String dispatchTimeFormat) {
        this.put("dispatch.time_format", dispatchTimeFormat);
    }
    
    /**
     * @param dispatchTtl
     *      Valid values: Integer[p]
     *      
     *      Indicates the time to live (in seconds) for the artifacts of the scheduled search, if no actions are triggered.
     *      
     *      If an action is triggered Splunk changes the ttl to that action's ttl. If multiple actions are triggered, Splunk applies the maximum ttl to the artifacts. To set the action's ttl, refer to alert_actions.conf.spec.
     *      
     *      If the integer is followed by the letter 'p' Splunk interprets the ttl as a multiple of the scheduled search's period.
     */
    public void setDispatchTtl(String dispatchTtl) {
        this.put("dispatch.ttl", dispatchTtl);
    }
    
    /**
     * @param triggerActions
     *      Indicates whether to trigger alert actions.
     */
    public void setTriggerActions(boolean triggerActions) {
        this.put("trigger_actions", triggerActions);
    }
    
    /**
     * @param forceDispatch
     *      Indicates whether to start a new search even if another instance of this search is already running.
     */
    public void setForceDispatch(boolean forceDispatch) {
        this.put("force_dispatch", forceDispatch);
    }
    
    /* END AUTOGENERATED CODE */
}
