/*
 * Copyright 2012 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.splunk;

/**
 * Arguments for the {@link Job#getResults} method.
 */
public class JobResultsArgs extends Args {

    /**
     * Specifies the format for the returned output. For details on each format, see Splunk responses to REST operations.
     */
    public static enum OutputMode {
        ALL("all"),
        ATOM("atom"),
        CSV("csv"),
        FULL("full"),
        JSON("json"),
        JSON_COLS("json_cols"),
        JSON_ROWS("json_rows"),
        SUMMARY("summary"),
        RAW("raw"),
        XML("xml");
        
        private String value;
        
        private OutputMode(String value) {
            this.value = value;
        }
        
        /**
         * @return The REST API value for this enumerated constant.
         */
        public String toString() {
            return this.value;
        }
    }

    /**
     * Class constructor.
     */
    public JobResultsArgs() { super(); }
    
    /* BEGIN AUTOGENERATED CODE */
    
    /**
     * @param count
     *      The maximum number of results to return.
     *      
     *      If value is set to 0, then all available results are returned.
     */
    public void setCount(int count) {
        this.put("count", count);
    }
    
    /**
     * @param fieldList
     *      A list of the fields to return for the event set. 
     */
    public void setFieldList(String[] fieldList) {
        this.put("f", fieldList);
    }
    
    /**
     * @param offset
     *      The first result (inclusive) from which to begin returning data.
     *      
     *      This value is 0-indexed. Default value is 0.
     *      
     *      In 4.1+, negative offsets are allowed and are added to count to compute the absolute offset (for example, offset=-1 is the last available offset).
     *      
     *      Offsets in the results are always absolute and never negative.
     */
    public void setOffset(int offset) {
        this.put("offset", offset);
    }
    
    /**
     * @param outputMode
     *      Specifies the format for the returned output. For details on each format, see Splunk responses to REST operations. 
     */
    public void setOutputMode(OutputMode outputMode) {
        this.put("output_mode", outputMode);
    }
    
    /**
     * @param search
     *      The post processing search to apply to results. Can be any valid search language string.
     */
    public void setSearch(String search) {
        this.put("search", search);
    }
    
    /* END AUTOGENERATED CODE */
}
