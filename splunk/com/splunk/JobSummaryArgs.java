/*
 * Copyright 2012 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.splunk;

public class JobSummaryArgs extends Args {

    /**
     * Class constructor.
     */
    public JobSummaryArgs() { super(); }
    
    /* BEGIN AUTOGENERATED CODE */
    
    /**
     * @param earliestTime
     *      Time string representing the earliest (inclusive), respectively, time bounds for the search.
     *      
     *      The time string can be either a UTC time (with fractional seconds), a relative time specifier (to now) or a formatted time string. (Also see comment for the search_mode variable.) 
     */
    public void setEarliestTime(String earliestTime) {
        this.put("earliest_time", earliestTime);
    }
    
    /**
     * @param fieldList
     *      A list of the fields to return for the event set.
     */
    public void setFieldList(String[] fieldList) {
        this.put("f", fieldList);
    }
    
    /**
     * @param histogram
     *      Indicates whether to add hitsogram data to the summary output. 
     */
    public void setHistogram(boolean histogram) {
        this.put("histogram", histogram);
    }
    
    /**
     * @param latestTime
     *      Time string representing the latest (exclusive), respectively, time bounds for the search.
     *      
     *      The time string can be either a UTC time (with fractional seconds), a relative time specifier (to now) or a formatted time string. (Also see comment for the search_mode variable.)
     */
    public void setLatestTime(String latestTime) {
        this.put("latest_time", latestTime);
    }
    
    /**
     * @param minimumFrequency
     *      For each key, the fraction of results this key must occur in to be displayed.
     *      
     *      Express the fraction as a number between 0 and 1. 
     */
    public void setMinimumFrequency(double minimumFrequency) {
        this.put("min_freq", minimumFrequency);
    }
    
    /**
     * @param outputTimeFormat
     *      Formats a UTC time. Defaults to what is specified in time_format.
     */
    public void setOutputTimeFormat(String outputTimeFormat) {
        this.put("output_time_format", outputTimeFormat);
    }
    
    /**
     * @param search
     *      Specifies a substring that all returned events should contain either in one of their values or tags.
     */
    public void setSearch(String search) {
        this.put("search", search);
    }
    
    /**
     * @param timeFormat
     *      Expression to convert a formatted time string from {start,end}_time into UTC seconds.
     *      
     *      It defaults to %m/%d/%Y:%H:%M:%S
     */
    public void setTimeFormat(String timeFormat) {
        this.put("time_format", timeFormat);
    }
    
    /**
     * @param topCount
     *      For each key, specfies how many of the most frequent items to return.
     */
    public void setTopCount(int topCount) {
        this.put("top_count", topCount);
    }
    
    /* END AUTOGENERATED CODE */
}
